{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","list","allList","checkList","activeList","completedList","toggleChecked","bind","e","window","event","keyCode","target","value","newItem","id","this","length","checked","setState","filter","todo","index","indexNumber","indexOf","splice","i","className","type","onKeyDown","add","placeholder","onClick","allChecked","map","key","onChange","delect","changeAll","changeActive","changeCompleted","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4a1b482.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n// import { thisExpression } from '@babel/types';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [],\n      allList: [],\n      checkList: [],\n      activeList: [],\n      completedList: []\n    };\n    this.toggleChecked = this.toggleChecked.bind(this)\n  }\n\n  componentDidMount(){\n\n  }\n\n  add(e){\n    if(window.event.keyCode === 13 && e.target.value){\n      var i = this.state.allList.length\n      let newItem = {\n        id: i,\n        value:e.target.value,\n        checked: false\n      }\n      this.setState({allList:[...this.state.allList,newItem]})\n      this.setState({list:[...this.state.allList,newItem]})\n      // let {list}= this.state\n      // list.push({value:e.target.value})\n      // this.setState({list})\n        e.target.value = '' \n      }\n  }\n\n\n  changeAll(){\n    this.setState({list:this.state.allList})\n  }\n\n  changeActive(){\n    this.state.activeList = this.state.allList.filter(function (todo) {\n      return !todo.checked;\n    })\n    this.setState({list:this.state.activeList})\n  }\n\n  changeCompleted(){\n    this.state.completedList = this.state.allList.filter(function (todo) {\n      return todo.checked;\n    });\n    this.setState({list:this.state.completedList})\n  }\n\n  toggleChecked(e,index){\n    this.state.list[index].checked = e.target.checked\n    this.setState({list:this.state.list})\n  }\n\n  delect(index){\n    let indexNumber = this.state.allList.indexOf(this.state.list[index])\n    this.state.list.splice(index,1)\n    this.state.allList.splice(indexNumber,1)\n    this.setState({list:this.state.list})\n    this.setState({allList:this.state.allList})\n  }\n\n  allChecked(){\n    if(this.state.list[0].checked == false){\n      for(let i=0;i<this.state.list.length;i++){\n        this.state.list[i].checked = true\n      }\n    }else{\n      for(let i=0;i<this.state.list.length;i++){\n        this.state.list[i].checked = false\n      }\n    }\n    this.setState({list:this.state.list})\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n          <p>\n            To DO List\n          </p>\n        </header>\n        <div className=\"class\">\n          <div className=\"inputBox\">\n            <input className=\"input\" type=\"text\" onKeyDown={this.add.bind(this)} placeholder=\"What needs to be done?\" />\n            <i className=\"allChecked\" onClick={this.allChecked.bind(this)}>></i>\n          </div>\n          <div className=\"listBox\">\n            {this.state.list.map((todo,index) => (\n              <div key={'li'+todo.id}>\n                <input type=\"checkbox\" onChange={(e) => this.toggleChecked(e,index)} checked={todo.checked} />\n                <label className={todo.checked == true ? 'lineThrough': ''}>{todo.value}</label>\n                <span className=\"right cancle\" onClick={this.delect.bind(this,index)}>+</span>\n              </div>\n\n            ))}\n          </div>\n        </div>\n        <footer>\n            <div className=\"left\">{this.state.list.length} items left</div>\n            <div className=\"btns right\">\n                <div onClick={this.changeAll.bind(this)}>All</div>\n                <div onClick={this.changeActive.bind(this)}>Active</div>\n                <div onClick={this.changeCompleted.bind(this)}>Completed</div>\n            </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}