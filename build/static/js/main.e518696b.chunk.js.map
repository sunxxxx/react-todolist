{"version":3,"sources":["listItem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","e","index","this","list","checked","target","isAllChecked","every","item","activeLable","allListIndex","allList","indexOf","splice","setState","window","localStorage","setItem","JSON","stringify","listIndex","className","map","todo","key","id","type","onChange","toggleChecked","value","onClick","delect","React","Component","App","allChecked","state","length","itemAllChecked","itemId","toDoList","getItem","parse","data","event","keyCode","newItem","some","console","log","activeList","filter","completedList","onKeyDown","add","bind","placeholder","changeActive","changeCompleted","delectAll","changeAll","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e518696b.chunk.js","sourcesContent":["import React from 'react'\n\n\nclass ListItem extends React.Component{\n    constructor(props){\n        super(props)\n    }\n\n    toggleChecked(e,index){\n        this.props.list[index].checked = e.target.checked\n        if(e.target.checked === false){\n            //设置全选是否选中状态\n            this.props.isAllChecked(false)\n        }else{\n            let allChecked = this.props.list.every( item => item.checked === true)\n            if(allChecked){\n                this.props.isAllChecked(true)\n            }\n        }\n\n          if(this.props.activeLable === 1){\n            var allListIndex = this.props.allList.indexOf(this.props.list[index])\n            this.props.list.splice(index,1)\n            this.props.allList[allListIndex].checked = e.target.checked\n            this.props.isAllChecked(false)\n          }else if(this.props.activeLable === 2){\n            this.props.list.splice(index,1)\n            this.props.isAllChecked(false)\n          }\n          this.setState({\n              list:this.props.list,\n              allList: this.props.allList,\n            },()=>{\n            window.localStorage.setItem('toDoList', JSON.stringify(this.props.allList));\n          })\n    \n      }\n\n    delect(e,index){\n        var listIndex = this.props.allList.indexOf(this.props.list[index])\n        if(this.props.activeLable === 0){\n            this.props.list.splice(index,1)\n            this.setState({\n                list:this.props.list,\n                allList:this.props.list\n            },()=>{\n                window.localStorage.setItem('toDoList', JSON.stringify(this.props.list));\n            })\n        }else{\n            this.props.list.splice(index,1)\n            this.props.allList.splice(listIndex,1)\n            this.setState({\n                list:this.props.list,\n                allList:this.props.allList\n            },()=>{\n                window.localStorage.setItem('toDoList', JSON.stringify(this.props.allList));\n            })\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"listBox\">\n                {this.props.list.map((todo,index) => (\n                <div key={'li'+todo.id}>\n                    <input className=\"checked item_checked\" type=\"checkbox\" onChange={(e) => this.toggleChecked(e,index)} checked={todo.checked} />\n                    <label className={todo.checked === true ? 'line_through': ''}>{todo.value}</label>\n                    <span className=\"right cancle\" onClick={(e)=>this.delect(e,index)}>+</span>\n                </div>\n\n                ))}\n            </div>\n        )\n       \n    }\n}\n\nexport default ListItem;","import React from 'react';\nimport './App.css';\nimport ListItem from './listItem'\n// import { thisExpression } from '@babel/types';\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      list: [],\n      allList: [],\n      activeLable: 0,\n      itemId:0,\n      allChecked: false\n    };\n  }\n\n  componentWillMount(){\n    const toDoList = window.localStorage.getItem('toDoList') || '[]';\n    const itemId = window.localStorage.getItem('itemId') || 0;\n    this.setState(\n\t\t  {\n            list: JSON.parse(toDoList),\n            allList: JSON.parse(toDoList),\n            itemId: JSON.parse(itemId)\n\t\t  }\n\t  );\n  }\n\n  componentDidMount(){\n    let allChecked = this.state.list.every( item => item.checked === true)\n    this.setState({allChecked:allChecked},()=>{})\n  }\n\n  isAllChecked(data){\n    this.setState({allChecked:data})\n  }\n\n  add(e){\n    if(window.event.keyCode === 13 && e.target.value){\n      let newItem = {\n        id: this.state.itemId,\n        value:e.target.value,\n        checked: false\n      }\n\n      let itemExist = this.state.list.some( item => item.value === newItem.value)\n      if(!itemExist){\n        var itemId = this.state.itemId+1\n\n        this.setState({\n          allList:[...this.state.allList,newItem],\n          list:[...this.state.list,newItem],\n          itemId: itemId,\n          allChecked: false\n        },()=>{\n          window.localStorage.setItem('toDoList', JSON.stringify(this.state.allList));\n          window.localStorage.setItem('itemId', JSON.stringify(this.state.itemId));\n        })\n\n        // if(this.state.activeLable === '1'){\n        //   this.changeActive()\n        // }\n          e.target.value = '' \n        }else{\n          console.log('item exist')\n        }\n      }   \n  }\n\n\n  changeAll(){\n    let allChecked = this.state.allList.every( item => item.checked === true)\n    this.setState({\n      list:this.state.allList,\n      activeLable:0,\n      allChecked:allChecked\n    },()=>{})\n  }\n\n  changeActive(){\n    let activeList = this.state.allList.filter(todo=>!todo.checked)\n    this.setState({\n      activeLable:1,\n      list:activeList,\n      allChecked: false,\n    },()=>{})\n  }\n\n  changeCompleted(){\n    let completedList = this.state.allList.filter(todo=>todo.checked);\n    this.setState({\n      activeLable:2,\n      list:completedList,\n      allChecked: false,\n    },()=>{})\n  }\n\n\n  allChecked = (e) => {\n    if(this.state.activeLable === 1){\n      this.setState({\n        allList: this.state.allList.map((item) => ({...item, 'checked': true})),\n        list: []\n      },()=>{\n        window.localStorage.setItem('toDoList', JSON.stringify(this.state.allList));\n      })\n    }else if(this.state.activeLable === 2){\n      this.setState({\n        allList: this.state.allList.map((item) => ({...item, 'checked': false})),\n        list: []\n      },()=>{\n        window.localStorage.setItem('toDoList', JSON.stringify(this.state.allList));\n      })\n    }else{\n      if(this.state.list.length>0){\n        let allChecked = e.target.checked\n  \n        let itemAllChecked = this.state.list.every( item => item.checked === true)\n  \n        if(!itemAllChecked){\n          allChecked = true;\n        }else{\n          allChecked = false\n        }\n  \n        this.setState({\n            list: this.state.list.map((item) => ({...item, 'checked': allChecked})),\n            allChecked: allChecked\n        },()=>{\n          window.localStorage.setItem('toDoList', JSON.stringify(this.state.list));\n        })\n      }\n    }\n    \n  }\n\n  delectAll(){\n    this.setState({\n        list:[],\n        allList: [],\n    })\n    window.localStorage.setItem('toDoList', []);\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>\n            todos\n          </h1>\n        </header>\n        <div className=\"Box\">\n          <div className=\"inputBox\">\n            <input className=\"input\" type=\"text\" onKeyDown={this.add.bind(this)} placeholder=\"What needs to be done?\" />\n            {/* <i className=\"allChecked\" onClick={this.allChecked.bind(this)}>></i> */}\n          </div>\n\n\n          <ListItem allList={this.state.allList} list={this.state.list} activeLable={this.state.activeLable} changeActive={this.changeActive} changeCompleted={this.changeCompleted} isAllChecked={this.isAllChecked.bind(this)} />\n\n        \n            <footer>\n                <input className=\"checked left\" type=\"checkbox\" onChange={(e)=>this.allChecked(e)} checked={this.state.allChecked}  />\n                <div className=\"left\">{this.state.list.length} items left</div>\n            \n                { this.state.allChecked &&\n                <button className=\"delect_btn\" onClick={this.delectAll.bind(this)}>Delect All</button>\n                }\n                <div className=\"btns right\">\n                    <div className={this.state.activeLable === 0 ? 'activeBtn':''} onClick={this.changeAll.bind(this)}>All</div>\n                    <div className={this.state.activeLable === 1 ? 'activeBtn':''} onClick={this.changeActive.bind(this)}>Active</div>\n                    <div className={this.state.activeLable === 2 ? 'activeBtn':''} onClick={this.changeCompleted.bind(this)}>Completed</div>\n                </div>\n            </footer>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}